#!/bin/bash

app_printf()
{
  printf -- "\033[32m${@}\033[0m";
}

runner_printf()
{
  printf -- "\033[90m${@}\033[0m";
}

runner_errorf()
{
  printf -- "\033[31m${@}\033[0m";
}

set_red()
{
  printf -- "\033[31m";
}

set_grey()
{
  printf -- "\033[90m";
}

set_normal()
{
  printf -- "\033[0m";
}

update_dependencies()
{
  if [ -e "$(pwd)/go.mod" ]; then
    runner_printf 'retrieving dependencies... ';
    set_grey;
    GO111MODULE=on go mod download;
    GO111MODULE=on go mod vendor;
    set_normal;
    runner_printf 'dependencies retrieved.\n';
  fi;
}

build_it()
{
  runner_printf 'building app... ';
  set_red;
  /scripts/build;
  BUILD_FAILED=$?;
  set_normal;
  if [ ${BUILD_FAILED} -eq 0 ]; then
    runner_printf 'built.\n';
  else
    runner_errorf "failed to build (build exited with status code ${BUILD_FAILED}).\n";
  fi;
}

run_it()
{
  runner_printf 'starting app... ';
  $(pwd)/app ${ALL_PARAMETERS} &
  APP_PID=$!;
  app_printf "\n- - - app:${APP_PID} logs below this line - - -\n";
}

kill_it()
{
  app_printf "- - - app:${APP_PID} logs above this line - - -\n";
  runner_printf "killing process ID ${APP_PID}... ";
  set_grey;
  ps | grep app | grep ${APP_PID} && kill ${APP_PID} >/dev/null & wait;
  set_normal;
  runner_printf "process with PID ${APP_PID} killed.\n";
}